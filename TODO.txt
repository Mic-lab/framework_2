
Less important:
- Implement sequence control in entity and particle class (maybe use some similar function
  because their code will be similar)
- Cache glow
- Change animation loading (maybe load everything at once or
load aniamtions from main.py)
- Particle
  - Particle and AnimatedParticle have similar code, so they could have inherited
    to optimize code
  - Add random range to particles initial position
  - Add hue shift
  - Have the particle's glow alpha attribute affect the glow's alpha when used in a 
    particle. At the moment, it's determined by the particles alpha value
  - Add Angle initial value and angle_change, to have a constant angle change 
    frame
  - Caching:
      - Cache angle image
  - Set both particle animation database and entity animation database to be class variables
  - In particle generator (and AnimatedParticleGenerator), the update method is almost identical to update_and_render method.
    So instead I can give update_and_render an argument that determines if I render or not
--------------------------------------------------------------------------------
Give particle new attribute for the glow's special flag

for x and y axis -> flip and offset
Give attributes rect and vel to Entity
Reduce "data/scripts/config.json" repetition
Fix globals with font databases
Capitalize constants
Implement button class

font_database can only be accessed from the file at which it's created`